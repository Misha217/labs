#include "labs.h"

void lab_1() {

    double h, t, v0, G;
    G = 9.81;
        printf("Введите высоту h (в метрах): ");
    scanf("%lf", &h);
    printf("Введите время t (в секундах): ");
    scanf("%lf", &t);
    // Вычисление начальной скорости
    v0 = (h - 0.5 * G * t * t) / t;
    printf("Начальная скорость шарика: %.2f м/с\n\n", v0);

}

float foo1(float H, float T) {
    float v;
    v = (H / T) - (0.5 * g * T);
    return v;
}

void lab_1_1() {

    float v0, h, t;
    printf("Введите высоту (в метрах)\n");
    scanf("%f", &h);
    printf("Введите время (в секундах)\n");
    scanf("%f", &t);
    v0 = foo1(h, t);
    printf("\n Скорость v0 = %.2f\n\n", v0);

}

void lab_2() {

    float s; // сумма ряда
    float a; // очередной элемент ряда
    float x; //входной параметр ряда
    float b; // знаменатель
    int c; // числитель
    int n;  //число элементов ряда
    int i; // номер очередного элемента

    printf("n=");
    scanf("%d", &n);
    printf("x=");
    scanf("%f", &x);

    s = 0;
    i = 1;

    while (i <= n)
    {
        c = i;
        b = x * i;
        a = c / b;
        i = i + 1;
        s = s + a;
    }

    printf("n = %d, s = %f\n\n", n, s);

}

void lab_2_1() {

    float s; // сумма ряда
    float a; // очередной элемент ряда
    float x; //входной параметр ряда
    float b; // знаменатель
    int c; // числитель
    int n;  //число элементов ряда
    int i; // номер очередного элемента

    printf("n=");
    scanf("%d", &n);
    printf("x=");
    scanf("%f", &x);

    s = 0;
    i = 1;


    for (i = 1; i <= n; i++)
    {
        c = i;
        b = x * i;
        a = c / b;
        s = s + a;
    }

    printf("n = %d, s = %f\n\n", n, s);

}

void lab_3() {

    int count = 0; //счетчик
    char line; //строка с символами
    int flag = 0; //флаг проверки позиции внутри строки символов
    int length = 0; //длина текущего слова
    while ((line = getchar()) != '\n' && line!= EOF); // очистка буфера
    printf("Введите слова \n");
    while ((line = getchar()) != '\n')
    {
        if (line != ' ')
        {
            length++;
            flag = 1;
        }
        else
        {
            if ((flag) && (length % 2 == 1))
            {
                count++;
            }
            length = 0;
            flag = 0;
        }
    }
    if ((flag) && (length % 2 == 1)) {
        count++;
    }
    printf("Count = %d\n\n", count);

}

void lab_4() {
  
    char line[MAXLINE];
    
    //Ввод строки (аналог fgets, но без string.h)
    int i = 0;
    char c;
    while ((c = getchar()) != '\n' && c != EOF); //очистка буфера
    printf("Введите строку: ");
    
    while ((c = getchar()) != '\n' && c != EOF && i < MAXLINE - 1) {
       line[i++] = c;
    }
   line[i] = '\0';  // Ручное завершение строки

   

    process_line(line);

     //Вывод строки (аналог puts, но без string.h)
    i = 0;
    while (line[i] != '\0') {
        putchar(line[i++]);
    }
    putchar('\n');
    
   
}

void process_line(char buffer[]) {
  char c;          // текущий символ
    int flag = NO;   // признак слова
    int i = 0;       // позиция в исходной строке
    int pos = 0;     // позиция в результирующей строке
    int start = 0;    // позиция начала слова
    int max_start = 0; // начало самого длинного слова
    int max_length = 0; // длина самого длинного слова
    int current_length = 0; // длина текущего слова

    // Первый проход: поиск самого длинного слова
    do {
        c = buffer[i];
        if (c == ' '||  c == '\t'||  c == '\n' || c == '\0') {
            if (flag == YES) {
                if (current_length > max_length) {
                    max_length = current_length;
                    max_start = start;
                }
                current_length = 0;
            }
            flag = NO;
        } else {
            if (flag == NO) {
                start = i;
                current_length = 1;
            } else {
                current_length++;
            }
            flag = YES;
        }
        i++;
    } while (c != '\0');

    // Второй проход: копирование всех слов, кроме самого длинного
    i = 0;
    pos = 0;
    flag = NO;
    start = 0;
    current_length = 0;
    
    do {
        c = buffer[i];
        if (c == ' ' ||  c == '\t' || c == '\n' || c == '\0') {
            if (flag == YES) {
                if (!(start == max_start && current_length == max_length)) {
                    // Копируем слово в результат
                    for (int j = start; j < i; j++) {
                        buffer[pos++] = buffer[j];
                    }
                }
                current_length = 0;
            }
            flag = NO;
            buffer[pos++] = c;  // Копируем разделитель
        } else {
            if (flag == NO) {
                start = i;
                current_length = 1;
            } else {
                current_length++;
            }
            flag = YES;
        }
        i++;
    } while (c != '\0');

    buffer[pos] = '\0';  // Завершаем строку
}

void lab_5() {
     int array[N]; // массив
    int current_pl = 0; // счетчик положительных чисел
    int current_min = 0;  // счетчик отрицательных чисел
    int i;
    for(i=0; i<N; i++){  // ввод массива
        scanf("%d\n", &array[i]);
    }
    printf("первоначальный введенный массив:  ");
    for(i=0; i<N; i++){
        printf(" %d ",array[i]);
    }
    for(i=0; i<N; i++){ //подсчет отрицательных и положительных чисел
        if(array[i]>=0){
            current_pl++;
        } else {
            current_min++;
        }
    }

    if(current_min < current_pl){ // проверки на выполнение условий большинства или меньшинства позиций
        for(i=0; i<N; i++){
            if(array[i] <0){
                array[i] = 0;
            }
        }
    } else if(current_pl < current_min){
        for(i=0; i<N; i++){
            if(array[i]>0){
                array[i] = 0;
            }
        }
    } else if (current_min == current_pl){
        printf("\nОдинаковое количество положительных и отрицательных чисел, редктирование не выполняется");
    }
    
    printf("\nOтредактированный массив:  ");
    for(i=0; i<N; i++){
        printf(" %d ",array[i]);
    }
}

void lab_6() {
    
    int array[N][N];
    int max_line = 0, max_col = 0; //изначально за максимум возьмем позицию [0][0]
    int line; // строка
    int col; // столбец
    int temp; // доп переменная для перемещения элементов массива

    // Ввод массива
    for(line = 0; line < N; line++){
        for(col = 0; col < N; col++){
            scanf("%d", &array[line][col]);
        }    
    }
    printf("Введенный массив:\n");
    for(line = 0; line < N; line++){
        for(col = 0; col < N; col++){
            printf("  %d  ", array[line][col]);
        }
        printf("\n");
    }
    // Поиск максимального элемента и его позиции
    for(line = 0; line < N; line++){
        for(col = 0; col < N; col++){
            if(array[line][col] > array[max_line][max_col])
            {
                max_line = line;
                max_col = col;
            }
        }    
    }        

    // Обмен строки и столбца
    for(line = 0; line < N; line++){
        // Меняем местами элементы строки max_i и столбца max_j
        temp = array[max_line][line];
        array[max_line][line] = array[line][max_col];
        array[line][max_col] = temp;
    }

    // Вывод массива
    printf("Отредактированный массив:\n");
    for(line = 0; line < N; line++){
        for(col = 0; col < N; col++){
            printf("  %d  ", array[line][col]);
        }
        printf("\n");
}
}